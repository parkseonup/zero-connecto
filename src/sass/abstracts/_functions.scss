@use 'sass:math';
@use 'sass:map';
@use 'sass:meta';
@use 'sass:string';
@use 'variables/colors' as *;

// --------------------------------------------------------------------------
// Types
@function is-type($data) {
  @return meta.type-of($data);
}

@function is-null($data) {
  @return meta.type-of($data) == 'null';
}

@function is-string($data) {
  @return meta.type-of($data) == 'string';
}

@function is-color($data) {
  @return meta.type-of($data) == 'color';
}

@function is-number($data) {
  @return meta.type-of($data) == 'number';
}

@function is-bool($data) {
  @return meta.type-of($data) == 'bool';
}

@function is-list($data) {
  @return meta.type-of($data) == 'list';
}

@function is-map($data) {
  @return meta.type-of($data) == 'map';
}

// --------------------------------------------------------------------------
// Color

@function get-color($color-map, $color-level) {
  @return map.get($color-map, $color-level);
}

@function get-red($level) {
  @return get-color($red, $level);
}

@function get-gray($level) {
  @return get-color($gray, $level);
}

@function get-blue($level) {
  @return get-color($blue, $level);
}

@function get-green($level) {
  @return get-color($green, $level);
}

// --------------------------------------------------------------------------
//

@function remove-unit($unit) {
  @return math.div($unit, $unit * 0 + 1);
}

@function get-base-rem-size-percentage($base-px-size) {
  @return math.div(remove-unit($base-px-size), 16) * 100%;
}

@function rem($unit, $base: 16) {
  @return math.div(remove-unit($unit), remove-unit($base)) * 1rem;
}

@function em($unit, $base: 16) {
  @return math.div(remove-unit($unit), remove-unit($base)) * 1em;
}

@function get-unit($value) {
  @return math.unit($value);
}

@function has-unit($value) {
  @return get-unit($value) != '';
  // @return not math.is-unitless($value);
}

@function get-unit($value) {
  @return meta.unit($value);
}
// --------------------------------------------------------------------------
// Math

@function get-random($n) {
  @return math.round(math.random() * remove-unit($n));
}

@function get-random-min-max($min: 0, $max: 100) {
  @return get-random($max - $min) + $min;
}
